import java.util.*;

class User {
    private String userId;
    private int pin;
    private double balance;
    private ArrayList<String> transactions;

    public User(String userId, int pin, double balance) {
        this.userId = userId;
        this.pin = pin;
        this.balance = balance;
        this.transactions = new ArrayList<>();
    }

    public String getUserId() {
        return userId;
    }

    public int getPin() {
        return pin;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public ArrayList<String> getTransactions() {
        return transactions;
    }

    public void addTransaction(String detail) {
        transactions.add(detail);
    }
}

interface ATMOperations {
    void viewTransactionHistory();

    void withdraw();

    void deposit();

    void transfer();

    void viewBalance();
}

class ATMImpl implements ATMOperations {
    private User currentUser;
    private Map<String, User> users;
    private Scanner sc = new Scanner(System.in);

    public ATMImpl(User currentUser, Map<String, User> users) {
        this.currentUser = currentUser;
        this.users = users;
    }

    @Override
    public void viewTransactionHistory() {
        System.out.println("\nTransaction History:");
        ArrayList<String> history = currentUser.getTransactions();
        if (history.isEmpty()) {
            System.out.println("No transactions yet.");
        } else {
            for (String t : history) {
                System.out.println(t);
            }
        }
    }

    @Override
    public void withdraw() {
        System.out.print("Enter amount to withdraw: ");
        double amount = sc.nextDouble();
        if (amount <= currentUser.getBalance()) {
            currentUser.setBalance(currentUser.getBalance() - amount);
            currentUser.addTransaction("Withdrew ₹" + amount);
            System.out.println("Withdrawal successful.");
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    @Override
    public void deposit() {
        System.out.print("Enter amount to deposit: ");
        double amount = sc.nextDouble();
        currentUser.setBalance(currentUser.getBalance() + amount);
        currentUser.addTransaction("Deposited ₹" + amount);
        System.out.println("Deposit successful.");
    }

    @Override
    public void transfer() {
        System.out.print("Enter recipient User ID: ");
        String recipientId = sc.next();
        if (!users.containsKey(recipientId)) {
            System.out.println("Recipient not found.");
            return;
        }

        System.out.print("Enter amount to transfer: ");
        double amount = sc.nextDouble();
        if (amount <= currentUser.getBalance()) {
            User recipient = users.get(recipientId);
            currentUser.setBalance(currentUser.getBalance() - amount);
            recipient.setBalance(recipient.getBalance() + amount);

            currentUser.addTransaction("Transferred ₹" + amount + " to " + recipientId);
            recipient.addTransaction("Received ₹" + amount + " from " + currentUser.getUserId());

            System.out.println("Transfer successful.");
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    @Override
    public void viewBalance() {
        System.out.println("Current Balance: ₹" + currentUser.getBalance());
    }
}

public class EnhancedATM {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Sample users
        Map<String, User> users = new HashMap<>();
        users.put("user123", new User("user123", 1234, 10000.0));
        users.put("alice", new User("alice", 1111, 5000.0));
        users.put("bob", new User("bob", 2222, 8000.0));

        User loggedInUser = null;
        int attempts = 0;

        System.out.println("===== Welcome to Enhanced ATM =====");

        // Login loop
        while (attempts < 3) {
            System.out.print("Enter User ID: ");
            String userId = sc.next();
            System.out.print("Enter PIN: ");
            int pin = sc.nextInt();

            if (users.containsKey(userId) && users.get(userId).getPin() == pin) {
                loggedInUser = users.get(userId);
                break;
            } else {
                System.out.println("Invalid credentials. Try again.");
                attempts++;
            }
        }

        if (loggedInUser == null) {
            System.out.println("Too many failed attempts. Exiting...");
            return;
        }

        ATMOperations atm = new ATMImpl(loggedInUser, users);

        while (true) {
            System.out.println("\n----- ATM Menu -----");
            System.out.println("1. View Transaction History");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Transfer");
            System.out.println("5. View Balance");
            System.out.println("6. Quit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    atm.viewTransactionHistory();
                    break;
                case 2:
                    atm.withdraw();
                    break;
                case 3:
                    atm.deposit();
                    break;
                case 4:
                    atm.transfer();
                    break;
                case 5:
                    atm.viewBalance();
                    break;
                case 6:
                    System.out.println("Thank you for using the ATM. Goodbye!");
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }
}
